{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","userId","usersFromServer","find","App","useState","input","setInput","select","setSelect","newTodos","setTodos","validation","setValidation","action","method","onSubmit","event","preventDefault","trim","maxNumber","Math","max","item","selectedUser","author","prev","htmlFor","placeholder","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d98dfc5f.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../Types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      { name }\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../Types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    completed, user, title, id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        classNames({\n          TodoInfo: true,\n          'TodoInfo--completed': completed,\n        })\n      }\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n// import { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { FormEvent, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { User } from './Types/User';\nimport { Todo } from './Types/Todo';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [input, setInput] = useState('');\n  const [select, setSelect] = useState('0');\n  const [newTodos, setTodos] = useState(todos);\n  const [validation, setValidation] = useState(false);\n\n  const handlerEventOnSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (select === '0' || input.trim() === '') {\n      setValidation(true);\n\n      return;\n    }\n\n    const maxNumber = Math.max(...newTodos.map(item => item.id));\n\n    const selectedUser = usersFromServer.find(\n      (author: User) => (author.name === select),\n    );\n\n    if (!selectedUser) {\n      return;\n    }\n\n    setTodos(prev => [\n      ...prev,\n      {\n        id: maxNumber + 1,\n        userId: selectedUser.id,\n        completed: false,\n        title: input,\n        user: selectedUser,\n      },\n    ]);\n\n    setSelect('0');\n    setInput('');\n    setValidation(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handlerEventOnSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            Title:\n            <input\n              id=\"title\"\n              placeholder=\"Enter a title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={input}\n              onChange={(event) => {\n                setInput(event.target.value);\n              }}\n            />\n          </label>\n          {validation && input.trim() === '' ? (\n            <span className=\"error\">Please enter a title</span>\n          ) : null}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"\">\n            User:\n            <select\n              data-cy=\"userSelect\"\n              value={select}\n              onChange={(event) => {\n                setSelect(event.target.value);\n              }}\n            >\n              <option value=\"0\">Choose a user</option>\n              {usersFromServer.map(user => (\n                <option key={user.id} value={user.name}>{user.name}</option>\n              ))}\n            </select>\n          </label>\n          {validation && select === '0' ? (\n            <span className=\"error\">Please choose a user</span>\n          ) : null}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={newTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}